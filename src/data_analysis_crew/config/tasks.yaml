load_data:
  description: >
    Load the dataset from the path provided. Validate that the data is properly structured.
    Report basic metadata including shape, column names, and missing values.
    Save a CSV snapshot for downstream use if necessary.

    Data Source: {data_source}
  expected_output: >
    A summary report including:
    - Dataset shape
    - List of column names and inferred data types
    - Count of missing values per column
    - Save path of loaded dataset file (if modified)
  agent: data_engineer

clean_data:
  description: >
    Clean and preprocess the raw dataset:
    - Remove or impute missing values
    - Normalize and rename column names for consistency
    - Convert date/time formats if present
    - Identify categorical vs. numerical features
    - Drop irrelevant or constant columns

    Ensure compatibility with pandas operations and save cleaned dataset.
  expected_output: >
    A cleaned dataset path, and a Markdown summary of:
    - Cleaning steps taken
    - List of final feature names with types
    - Summary table of missing values (post-cleaning)
  agent: data_engineer
  context: [load_data]

explore_data:
  description: >
    Perform an exploratory analysis of the cleaned dataset:
    - Calculate descriptive statistics
    - Visualize distributions and relationships (scatter, histograms, boxplots)
    - Identify key correlations and possible outliers

    Request: {request}
  expected_output: >
    A Markdown report with:
    - At least 3 plots saved to {{output_dir}}/plots
    - A table of top correlations with the target
    - Notes on potential biases, anomalies, or outliers
  agent: data_analyst
  context: [clean_data]

select_features:
  description: >
    Based on the analysis, choose the most important features related to the request:
    {request}

    Also determine whether the prediction target is:
    - Categorical → classification
    - Numeric → regression

    Label the task type accordingly and provide reasons.
  expected_output: >
    A Markdown summary with:
    - A list of top features with brief justification
    - The inferred problem type ("classification" or "regression")
    - Justification for problem type choice
  agent: data_analyst
  context: [explore_data]
  
build_predictive_model:
  description: >
    Train a predictive model using:
    - RandomForestClassifier (if classification)
    - RandomForestRegressor (if regression)

    Steps:
    - Split dataset into train/test sets
    - Train the model and report accuracy, F1 score (if classification), and R²/MSE (if regression)
    - Save and return feature importances and key metrics

    Request: {request}
  expected_output: >
    A Markdown report with:
    - Final metrics (accuracy/F1 or R²/MSE)
    - A plot of feature importances saved to {{output_dir}}/plots/feature_importances.png
    - Summary table of training results
  agent: model_builder
  context: [clean_data, select_features]
  output_file: output/model-report.md

summarize_findings:
  description: >
    Summarize the full analysis and modeling outcome for decision-makers.
    Include:
    - Key variables found to influence the outcome
    - Model performance interpretation
    - Actionable recommendations

    Include a visual:
    ![Feature Importances](plots/feature_importances.png)
  expected_output: >
    A Markdown executive summary with:
    - 3–5 bullet points
    - A conclusion section with takeaways
    - Embedded plot image(s)
    - Highlight any assumptions or limitations
  agent: insight_reporter
  context: [build_predictive_model]
  output_file: output/final-insight-summary.md